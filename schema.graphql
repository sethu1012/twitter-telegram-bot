schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "cr_handles"
"""
type cr_handles {
  created_at: timestamptz!
  handle_name: String!
  id: bigint!
  is_deleted: Boolean!
  last_tweet_id: String
  updated_at: timestamptz!
}

"""
aggregated selection of "cr_handles"
"""
type cr_handles_aggregate {
  aggregate: cr_handles_aggregate_fields
  nodes: [cr_handles!]!
}

"""
aggregate fields of "cr_handles"
"""
type cr_handles_aggregate_fields {
  avg: cr_handles_avg_fields
  count(columns: [cr_handles_select_column!], distinct: Boolean): Int!
  max: cr_handles_max_fields
  min: cr_handles_min_fields
  stddev: cr_handles_stddev_fields
  stddev_pop: cr_handles_stddev_pop_fields
  stddev_samp: cr_handles_stddev_samp_fields
  sum: cr_handles_sum_fields
  var_pop: cr_handles_var_pop_fields
  var_samp: cr_handles_var_samp_fields
  variance: cr_handles_variance_fields
}

"""aggregate avg on columns"""
type cr_handles_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "cr_handles". All fields are combined with a logical 'AND'.
"""
input cr_handles_bool_exp {
  _and: [cr_handles_bool_exp!]
  _not: cr_handles_bool_exp
  _or: [cr_handles_bool_exp!]
  created_at: timestamptz_comparison_exp
  handle_name: String_comparison_exp
  id: bigint_comparison_exp
  is_deleted: Boolean_comparison_exp
  last_tweet_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "cr_handles"
"""
enum cr_handles_constraint {
  """unique or primary key constraint"""
  cr_handles_handle_name_key

  """unique or primary key constraint"""
  cr_handles_pkey
}

"""
input type for incrementing numeric columns in table "cr_handles"
"""
input cr_handles_inc_input {
  id: bigint
}

"""
input type for inserting data into table "cr_handles"
"""
input cr_handles_insert_input {
  created_at: timestamptz
  handle_name: String
  id: bigint
  is_deleted: Boolean
  last_tweet_id: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type cr_handles_max_fields {
  created_at: timestamptz
  handle_name: String
  id: bigint
  last_tweet_id: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type cr_handles_min_fields {
  created_at: timestamptz
  handle_name: String
  id: bigint
  last_tweet_id: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "cr_handles"
"""
type cr_handles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cr_handles!]!
}

"""
on conflict condition type for table "cr_handles"
"""
input cr_handles_on_conflict {
  constraint: cr_handles_constraint!
  update_columns: [cr_handles_update_column!]! = []
  where: cr_handles_bool_exp
}

"""Ordering options when selecting data from "cr_handles"."""
input cr_handles_order_by {
  created_at: order_by
  handle_name: order_by
  id: order_by
  is_deleted: order_by
  last_tweet_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: cr_handles"""
input cr_handles_pk_columns_input {
  id: bigint!
}

"""
select columns of table "cr_handles"
"""
enum cr_handles_select_column {
  """column name"""
  created_at

  """column name"""
  handle_name

  """column name"""
  id

  """column name"""
  is_deleted

  """column name"""
  last_tweet_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "cr_handles"
"""
input cr_handles_set_input {
  created_at: timestamptz
  handle_name: String
  id: bigint
  is_deleted: Boolean
  last_tweet_id: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type cr_handles_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type cr_handles_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type cr_handles_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type cr_handles_sum_fields {
  id: bigint
}

"""
update columns of table "cr_handles"
"""
enum cr_handles_update_column {
  """column name"""
  created_at

  """column name"""
  handle_name

  """column name"""
  id

  """column name"""
  is_deleted

  """column name"""
  last_tweet_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type cr_handles_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type cr_handles_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type cr_handles_variance_fields {
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "cr_handles"
  """
  delete_cr_handles(
    """filter the rows which have to be deleted"""
    where: cr_handles_bool_exp!
  ): cr_handles_mutation_response

  """
  delete single row from the table: "cr_handles"
  """
  delete_cr_handles_by_pk(id: bigint!): cr_handles

  """
  insert data into the table: "cr_handles"
  """
  insert_cr_handles(
    """the rows to be inserted"""
    objects: [cr_handles_insert_input!]!

    """on conflict condition"""
    on_conflict: cr_handles_on_conflict
  ): cr_handles_mutation_response

  """
  insert a single row into the table: "cr_handles"
  """
  insert_cr_handles_one(
    """the row to be inserted"""
    object: cr_handles_insert_input!

    """on conflict condition"""
    on_conflict: cr_handles_on_conflict
  ): cr_handles

  """
  update data of the table: "cr_handles"
  """
  update_cr_handles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: cr_handles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cr_handles_set_input

    """filter the rows which have to be updated"""
    where: cr_handles_bool_exp!
  ): cr_handles_mutation_response

  """
  update single row of the table: "cr_handles"
  """
  update_cr_handles_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: cr_handles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cr_handles_set_input
    pk_columns: cr_handles_pk_columns_input!
  ): cr_handles
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "cr_handles"
  """
  cr_handles(
    """distinct select on columns"""
    distinct_on: [cr_handles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cr_handles_order_by!]

    """filter the rows returned"""
    where: cr_handles_bool_exp
  ): [cr_handles!]!

  """
  fetch aggregated fields from the table: "cr_handles"
  """
  cr_handles_aggregate(
    """distinct select on columns"""
    distinct_on: [cr_handles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cr_handles_order_by!]

    """filter the rows returned"""
    where: cr_handles_bool_exp
  ): cr_handles_aggregate!

  """fetch data from the table: "cr_handles" using primary key columns"""
  cr_handles_by_pk(id: bigint!): cr_handles
}

type subscription_root {
  """
  fetch data from the table: "cr_handles"
  """
  cr_handles(
    """distinct select on columns"""
    distinct_on: [cr_handles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cr_handles_order_by!]

    """filter the rows returned"""
    where: cr_handles_bool_exp
  ): [cr_handles!]!

  """
  fetch aggregated fields from the table: "cr_handles"
  """
  cr_handles_aggregate(
    """distinct select on columns"""
    distinct_on: [cr_handles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cr_handles_order_by!]

    """filter the rows returned"""
    where: cr_handles_bool_exp
  ): cr_handles_aggregate!

  """fetch data from the table: "cr_handles" using primary key columns"""
  cr_handles_by_pk(id: bigint!): cr_handles
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

